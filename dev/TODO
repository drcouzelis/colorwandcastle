Title: Colorwand Castle

Resolution: 320x240
Block size: 20x20 blocks -> 16x12
Makayla hit box: 20x20
Game play area border: 1 block, all sides
Max vertical blocks: 10

Makayla is in a room.
Makayla stands on the left, facing right.
There are blocks of different colors / patterns on the right.
Clearing the last block reveals a door to the next level.
Makayla must clear all of the blocks.
Makayla's wand is randomly colored to match one of the block colors.
Makayla waves the wand to shoot a colored star.
Stars only appear lined up with rows of blocks.
If the star hits a block of the same color, the block disappears.
If the star hits a block of a differing color, it bounces back and can kill the player.

Obstacles
---------
. A snake walks around the border of the play area
. A fireball bounces around the room
. A monkey bounces back and forth in place
. A spider slowly moves up and down the screen on his web

Makayla can only shoot horizontally.
Enemies cannot be killed.
Stars do not affect enemies.
Enemies do no affect stars.
Being hit by an enemy causes the level to restart.
The player has an unlimited number of tries to complete a level.
The number and position of the blocks varies from room to room.

TODO:
* Adaptive star colors
  * Copy the tile into the star pattern
* Door to the next level appears behind the last block
* Enemies poof away when the last block disappears
* Endless retries, level resets after death

POWERUPS:
* Mega star
* Flashing star

IDEAS:
* Vertical levels?
* Left-facing levels?
* Hit-points on blocks?
* Create levels in code first, then transition to DAT files

Standard function prefixes:
* create
  . Allocate memory
  . Initialize defaults
  . Return the new data structure, NULL on failure
* destroy
  . Free all memory
  . Return NULL
* init
  . Initialize defaults in pre-existing data
  . Return EXIT_SUCCESS or EXIT_FAILURE
* get
  . Return a value
  . Does not modify data
* set
  . The first parameter is the data that is being modified
  . Alternatively, set a global

----

gamedata.c / h
* hero
* enemy
. room
* init_hero
. change_hero_type

gameplay.c / h
. init_gameplay
. load_level_from_file
. global hero, enemy list, room
. update_gameplay points to update_active_gamelay / update_paused_gameplay

. "Levels" don't exist, it's just a single set of data stored in gameplay
* "Blocks" and "tiles" don't exist, they're just sprites
. Gameplay can run even if no level has been loaded
